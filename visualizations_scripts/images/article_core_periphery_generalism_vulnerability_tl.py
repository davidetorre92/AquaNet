import sys  
sys.path.append('/home/davide/AI/Projects/AquaNet') # Initialize Experiment

import os
import numpy as np
import pandas as pd
import json

from utils.data_handling import create_folder, print_time
from settings import verbose, article_images_folder, df_core_periphery_generality_all_proportion_path, df_core_periphery_generality_living_proportion_path
import seaborn as sns
import matplotlib.pyplot as plt
# Deactivate warnings
import warnings
warnings.filterwarnings("ignore")

mode = 'all'
plt.rcParams.update({
    "font.size":30,
    "font.family":"serif",
    "font.weight":"normal",
    "axes.labelsize":20,
    "xtick.labelsize":20,
    "ytick.labelsize":20,
    "legend.fontsize":20
})

if verbose:
    print_time(f"Selected mode: {mode}.")
    if mode == 'living':
        print(f"\tThe proportion of generalist and vulnerable species in the core - periphery structure is computed for the living creature subgraph.")
        core_periphery_generality_proportion_df = df_core_periphery_generality_living_proportion_path
        figure_name = lambda cat: f'{cat}_living_composition_gen_vul.eps'
    elif mode == 'all':
        print(f"\tThe proportion of generalist and vulnerable species in the core - periphery structure is computed for the whole graph.")
        core_periphery_generality_proportion_df = df_core_periphery_generality_all_proportion_path
        figure_name = lambda cat: f'{cat}_all_composition_gen_vul.eps'
    else:
        raise ValueError(f'Mode {mode} not implemented.')
    print_time(f"Output path: {core_periphery_generality_proportion_df}.")
df = pd.read_pickle(core_periphery_generality_proportion_df)


for category in ['core', 'periphery']:
    df = pd.read_pickle(core_periphery_generality_proportion_df)
    # Melt dataframe index is "Network", the rest are values and descriptors
    df = df.melt(id_vars = ['Network'], var_name = 'Category', value_name = 'Proportion')
    # Select does values that have the world category in the "Category" column
    data_to_plot = df[df['Category'].str.contains(category)]
    # Change "Category" column by selecting the first word.
    data_to_plot['Category'] = data_to_plot['Category'].str.split().str[0]
    # Make a boxplot where X is Category. Set the color to red for "Generalist" and blue for "Vulnerable".
    fig, ax = plt.subplots(figsize = (8,8))
    sns.boxplot(data = data_to_plot, x='Category', y='Proportion', 
            showmeans=True, meanprops={'marker':'+' ,'markersize':12, 'markeredgecolor':'black', 'markerfacecolor':'white', 'markeredgewidth': 3}, 
            hue = 'Category', palette=['#000080ff', '#ff5a00ff'], 
            width = 0.25,
            ax = ax)
    # Formatting the plot
    plt.title(f'{category.capitalize()}')
    plt.ylabel('Proportion')
    plt.xlabel('')

    # Set the y-axis limit
    ax.set_ylim(-0.05, 1.05)

    # Adjust y-axis labels to percentage format
    plt.gca().set_yticklabels([f'{int(tick*100)}%' for tick in plt.gca().get_yticks()])


    # Display the plot
    plt.tight_layout()
    # Save the figure
    img_path = os.path.join(article_images_folder, figure_name(category))
    create_folder(img_path, verbose = verbose)
    fig.savefig(img_path)
    if verbose:
        print_time(f"Image saved in {img_path}")

    # Print averages by category
    if verbose:
        print(f"Averages by category in the {category}:")
        means = data_to_plot.groupby('Category')['Proportion'].mean()
        # Show indexed percentages
        means = means.sort_index(ascending = True)
        means = [f'{i}: {m*100:.1f}%' for i, m in zip(means.index, means)]
        for e in means:
            print(e)