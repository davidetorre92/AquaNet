import numpy as np
import pandas as pd

import os
import argparse
from configparser import ConfigParser
from ..utils.file_handlers import get_dataset_living, index_from_dataset, save_df_to_pickle

# ArgParser
parser = argparse.ArgumentParser(description = "Create similarity dataset")
parser.add_argument("--config", "-c", type = str, help = "path/to/config.ini", required=True)
args = parser.parse_args()
config_path = args.config

# Reading settings
config = ConfigParser()
config.read(config_path)

dataset_path = config.get('dataset', 'dataset_path')
nodes_classification_df_path = config.get('core and periphery', 'nodes_classification_df_path')
gen_vul_df_path = config.get('core and periphery', 'gen_vul_df_path')

# Reading data
G_dataset = get_dataset_living(dataset_path, verbose = False)
nodes_classification_df = pd.read_pickle(nodes_classification_df_path)

# Filter living nodes
nodes_classification_df = nodes_classification_df[nodes_classification_df['ECO'] == 1]

# Collect generality and vulnerability for each node
rows = []
v_data = {}
for graph_name in nodes_classification_df['graph_name'].unique():
    igr = index_from_dataset(G_dataset, graph_name)
    G = G_dataset[igr]
    L_S = G.ecount() / G.vcount()
    v_data[graph_name] = {}
    for v in G.vs:
        v_data[graph_name][v['name']] = {}
        v_data[graph_name][v['name']]['vul'] = 1 / L_S * v.outdegree()
        v_data[graph_name][v['name']]['gen'] = 1 / L_S * v.indegree()

# Create the table with living nodes informations
for i, row_nodes_df in nodes_classification_df.iterrows():

    graph_name = row_nodes_df['graph_name']
    node_id = row_nodes_df['node_id']
    node_name = row_nodes_df['node_name']
    periphery_structure_name = row_nodes_df['periphery_structure_name']
    vul = v_data[graph_name][node_name]['vul']
    gen = v_data[graph_name][node_name]['gen']
    row = (graph_name, node_id, node_name, periphery_structure_name, gen, vul)
    rows.append(row)

columns = ['graph_name', 'node_id', 'node_name', 'periphery_structure_name', 'generality', 'vulnerability']
gen_vul_df = pd.DataFrame(rows, columns = columns)
save_df_to_pickle(gen_vul_df, gen_vul_df_path)

